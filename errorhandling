 """errors and exception 
types of errors/excption
try-block
except
finally
rasing exception
built-in function"""
#logical errors- ZeroDivisionError,NameError,TypeError
#handling ZeroDivisionError
num=int(input())
den=int(input())
try:
    q=num/den
    print("result:",q)
except ZeroDivisionError:
    print("den can't be divisible by zero")
output:
 5
 0
den can't be divisible by zero
---------------------------------------------------------------------------
#multiple exception handling
try:
    num=int(input())
    print(num)
except(KeyboardInterrupt):
    print("you have to enter a number.....not string")
except(ValueError):
    print("please check before you press enter......program end")
print("bye byee")
output:
 ff
please check before you press enter......program end
bye byee
-------------------------------------------------------------
#multiple exceptions in a single block handling
try:
    num=int(input())
    print(num)
except(KeyboardInterrupt,ValueError,TypeError):
    print("please check befor entering....program")
output:
dnsjk
please check befor entering....program
-----------------------------------------------------------
#raise an exceptions
try:
    n=9
    print(n)
    raise ValueError
except:
    print("even executing perfectly ....exception raise manually")
output:
9
even executing perfectly ....exception raise manually
----------------------------------------------------------------------------
#re raise an error
try:
    raise NameError
except:
    print("re-raise")
    raise
output:
re-raise
+++++++++++++++
NameError                                 Traceback (most recent call last)
Cell In[25], line 3
      1 #re raise an error
      2 try:
----> 3     raise NameError
      4 except:
      5     print("re-raise")

NameError: 
-----------------------------------------------------------------------------
#instance using in exceptions
try: raise Exception ('hi','prerana','goodmorning')
except Exception as errorObj:
    print(type(errorObj))
    print(errorObj.args)
    print(errorObj)
    x,y,z=errorObj.args
    print("assigned1:",x)
    print("assigned2:",y,z)
output:
class 'Exception'>
('hi', 'prerana', 'goodmorning')
('hi', 'prerana', 'goodmorning')
assigned1: hi
assigned2: prerana goodmorning
-----------------------------------------------------------
def div(n,d):
    try:
        q=n/d
        print(q)
    except ZeroDivisionError:
        print("non-processed")
n=int(input())
d=int(input())
div(n,d)
output:
 4
 2
2.0


3
 0
non-processed
----------------------------------------------------------------
'''
Exception-base class/all exceptions
SystemExit- sys.exit()
StandardError- except sys.exit()/StopIteration
OverflowError- numeric type errors exceed the limit
ArithmeticError- base class for all classes
IOError- import file error
FloatingPointError- 
AssertionError- 
AttributeError-
ImportError
KeyError
EnvironmentError
IndexError
StopIterationError
EOFError
LookUpError
SyntaxError
SystemError
IndentationError
'''
----------------------------------------------------------------
class myError(Exception):
    def __init__(self,value):
        self.value=value
    def __str__(self):
        return repr(self.value)
try:
    raise myError(99)
except myError as e:
    print("Returned string s is:",e)
    print(type(e.value))

Output:
Returned string s is: 99
<class 'int'>
----------------------------------------------------------------
try:
    print("raise Exception")
    raise ValueError
finally:
    print("performing cleanup by finally")

output:
raise Exception
performing cleanup by finally
-----------------------------------------------------------------
try:
    print("abc")
    raise ValueError
except:
    print("123")
finally:
    print("abc123")

Output:
abc
123
abc123
--------------------------------------------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++CALCULATOR++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#interactive calc model with python operation
""" using class exception modeles"""
class Calculator:
    def __init__(self):
        self.one=0
        self.two=0
    def input_numbers(self):
        try:
            self.one=float(input("enter 1st number:"))
            self.two=float(input("enter 2nd number:"))
        except ValueError:
            print("invalid input.....please enter number")
            self.input_numbers()
    def add(self):
        return self.one+self.two
    def subtract(self):
        return self.one-self.two
    def multiply(self):
        return self.one*self.two
    def divide(self):
        if self.two==0:
            raise ZeroDivisionError("can't divide with zero")
        return self.one/self.two
    def modulo(self):
        return self.one%self.two
    def expo(self):
        return self.one**self.two
    def floor_division(self):
        return self.one//self.two
def display_menu():
    print("\n =======calculator menu ==============\n" )
    print("1.Addition(+)")
    print("2.Subtraction(-)")
    print("3.Multiplication(*)")
    print("4.Division(/)")
    print("5.Modulo(%)")
    print("6.Exponential(**)")
    print("7.Floor Division(//)")
    print("8.Exit")
    
def main():
    calc=Calculator()
    while True:
        display_menu()
        choice=input("select an operation (1-8):")
        if choice == "8":
            print("exit")
            break
        calc.input_numbers()
        try:
            if choice == "1":
                print("result:",calc.add())
            elif choice=="2":
                print("result:",calc.subtract())
            elif choice=="3":
                print("result:",calc.multiply())
            elif choice=="4":
                print("result:",calc.divide())
            elif choice=="5":
                print("result:",calc.modulo())
            elif choice=="6":
                print("result:",calc.expo())
            elif choice=="7":
                print("result:",calc.floor_division())
            else:
                print("invalid choice select from 1 to 8")
        except ZeroDivisionError as e:
            print("Error :",e)
        except Exception as e:
            print("unexpected error",e)
main()
OUTPUT:
 =======calculator menu ==============

1.Addition(+)
2.Subtraction(-)
3.Multiplication(*)
4.Division(/)
5.Modulo(%)
6.Exponential(**)
7.Floor Division(//)
8.Exit
select an operation (1-8): 1
enter 1st number: 2
enter 2nd number: 3
result: 5.0

 =======calculator menu ==============

1.Addition(+)
2.Subtraction(-)
3.Multiplication(*)
4.Division(/)
5.Modulo(%)
6.Exponential(**)
7.Floor Division(//)
8.Exit
select an operation (1-8): 8
exit
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

